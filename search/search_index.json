{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Welcome! WordHat is an integration layer between Behat and WordPress . It provides WordPress-specific functionality for common testing scenarios specific to WordPress sites. If you are new to the project or Behat, we recommend that you first read through our documentation. If you already know Behat, WordHat is available on Composer . If you encounter a bug, have a suggestion, or would like to help the project grow, please get in contact via Github or our Slack . What is Behat? \u00b6 Behat allow you to describe the behavior of a website in plain \u2014 but stylised \u2014 language, and then turn that description into an automated test that will visit the site and perform each step you describe. Such functional tests can help site builders ensure that the added value they have created while building a WordPress site continues to behave as expected, after any sort of site change: WordPress updates, new plugins, new features, and so on. Get started!","title":"Introduction"},{"location":"index.html#what-is-behat","text":"Behat allow you to describe the behavior of a website in plain \u2014 but stylised \u2014 language, and then turn that description into an automated test that will visit the site and perform each step you describe. Such functional tests can help site builders ensure that the added value they have created while building a WordPress site continues to behave as expected, after any sort of site change: WordPress updates, new plugins, new features, and so on. Get started!","title":"What is Behat?"},{"location":"changelog.html","text":"News \u00b6 WordHat does not yet support WordPress\u2019 new content editor (Gutenberg). The step definitions for creating content assume, and only work with, the classic WordPress editor. 3.2.0 - 2019-06-05 \u00b6 Added \u00b6 CI: Run build checks on Travis-CI. Changed \u00b6 Composer: update dependencies to latest constrained versions ( #244 ). Composer, Dev Packages: switch wp-cli package to wp-cli-bundle . Mink: restart browser between scenarios instead of resetting ( #245 ). Contexts, User: tick \u201cremember me\u201d when a user logs-in to WordPress ( #245 ). Fixed \u00b6 Update WordHat\u2019s internal tests for compatibility with recent versions of WordPress! Contexts, User: attempts made to improve intermittent failures with the log-in action ( #47 , #245 ). Drivers, WP-CLI: allow use of page_template when creating content ( #239 ). 3.1.2 - 2019-04-02 \u00b6 Fixed \u00b6 Contexts, User: fix errors and exceptions caused by trying to log-out before a browser is open. 3.1.1 - 2019-02-27 \u00b6 Changed \u00b6 Travis-CI/Appveyor automated checks have been temporarily removed from the project. Fixed \u00b6 Contexts, User: attempts made to improve intermittent failures with the log-in action ( #47 ). 3.1.0 - 2018-12-28 \u00b6 Changed \u00b6 Contexts, User: the \u201cgiven there are users\u2026\u201d step definition now auto-sets the new user\u2019s password ( #228 ). Drivers: Deprecate validateCredentials in UserElement classes; add no-op. Methods will be removed in 4.0.0 ( #220 ). Remove lazy assumption that a tested site has jQuery ( #213 ). Fixed \u00b6 Website: improve kerning in project logo. Features: fix typo in feature/theme.feature . Drivers: fix finding content by post_title when sticky posts exist ( #218 ). 3.0.0 - 2018-08-09 \u00b6 Changed \u00b6 Contexts, User: change \u201cI am logged in as \u2026\u201d step definition to disambiguate between role names and user names. e.g. \u201cGiven I am logged in as USER\u201d vs \u201cGiven I am logged in as an ROLE\u201d. Change users settings\u2019 format in behat.yml . Refer to website and/or behat.yml.dist . Github: update issue templates. Website: complete documentation of PHP exception error codes, and misc. tidy-up. Website: update mkDocs configuration for its latest version. Removed \u00b6 Remove deprecated SnippetAcceptingContext context from Behat context generator. Use vendor/bin/behat --snippets-for=MyContext --append-snippets --dry-run instead. 2.0.0 - 2018-06-03 \u00b6 Added \u00b6 Website: add \u201cOpen Source\u201d page, and misc. SEO improvements. Drivers, WP-CLI: in CommentElement::create() , add support for comment_approved , comment_karma , and comment_type arguments. Changed \u00b6 WordHat now requires PHP 7.1+. Build tooling and continuous integration reliability improvements. Fixed \u00b6 Fix null session when first step asserts a log-in. 1.2.0 - 2018-03-20 \u00b6 Added \u00b6 All PHP exceptions now include an error code . Changed \u00b6 WP-CLI driver is more reliable at showing error messages from WP-CLI when something goes wrong. 1.1.0 - 2018-03-05 \u00b6 Added \u00b6 Support for running multiple drivers simultaneously. Minor PHPDoc adjustments. Minor website updates (primary navigation changes, and robots.txt). Changed \u00b6 Require WP-CLI v1.5+. Most of the internals now use strict typehinting. Drivers: the \u201cpath\u201d argument is now optional. Composer dependencies updated to more recent versions. Fixed \u00b6 Step iAmViewingAuthorArchive now correctly accepts a user role as its parameter. 1.0.0 - 2018-01-18 \u00b6 Added \u00b6 New step definitions (8 new, 7 changed, and 1 removed). Full test coverage for all step definitions and internal WordPress drivers. Improved documentation. Changed \u00b6 Now requires PHP 7+. Internal API adjustments: Contexts now only map step definitions to code, functions used by steps have been moved into traits, and drivers encapsulate CRUD operations). PHPDoc improvements. Use PHPStan for static analysis instead of Scrutinizer-CI. New Docker environment for Travis CI; increases build confidence and reliability. Fixed \u00b6 Many issues discovered by completing our own test coverage. AppVeyor fixes. 0.9.2 - 2017-12-18 \u00b6 Fixed \u00b6 Fix (more) invalid YAML. 0.9.1 - 2017-12-14 \u00b6 Fixed \u00b6 Fix invalid YAML in services.yml. 0.9.0 - 2017-10-09 \u00b6 Changed \u00b6 PHPDoc updated/tweaked. Rename some PageObjects classes for internal consistency. Fixed \u00b6 Fix return value when creating users. Fix creating content with terms or meta, with WP-CLI driver. Removed \u00b6 Removed unused internal function isWordpressError() . Removed Composer package roave/security-advisories . Removed unused Context class. 0.8.0 - 2017-09-18 \u00b6 Added \u00b6 Finished implementing database content rollback options; consult documentation. Changed \u00b6 WordHat now requires PHP 7.0+. Renamed \u201cWP-API\u201d driver to \u201cWP-PHP\u201d (backwards-compatible, as long as you have not extended driver classes). Website; significant documentation update, especially for on-boarding new users. Path setting can now be a relative or absolute path. Previously, only absolute paths were supported. Fixed \u00b6 Website; mkdocs-material theme update to latest version (accessibility fixes). Various PHPDoc improvements and corrections. 0.7.1 - 2017-08-21 \u00b6 Changed \u00b6 Path setting can now be a relative or absolute path. Previously, only absolute paths were supported. 0.7.0 - 2017-06-30 \u00b6 Added \u00b6 ContentEditor and PostContentEditor page (element) objects for interacting with TinyMCE elements. EditPostContext . WidgetContext . Add optional redirect_to param to logIn() . Changed \u00b6 Driver interface re-organisation. See #21 . Fixed \u00b6 If a browser window is not open when the BeforeStep event is run, then our call to Selenium2Driver::executeScript() will throw an exception. Compatibility with WordPress 4.8. Toolbar page object: fix calls to evaluateScript . Strict version requirement for WP-CLI. Links and buttons behind the WordPress\u2019 Toolbar cannot be interacted with. Deprecated \u00b6 Rename is_wordpress_error() to isWordPressError() . 0.6.0 - 2017-04-05 \u00b6 Added \u00b6 Initial support for sensiolabs/behat-page-object-extension with support for parts of wp-admin, and the Toolbar. Changed \u00b6 Documentation corrections; website and PHPDoc. WP-CLI driver no longer fails if the command returns text through stdout. Travis-CI reports job status to our Slack; join us at https://wordhat.herokuapp.com \ud83d\ude00 Composer requirements loosened for better compatibility with other projects. Fixed \u00b6 Travis-CI tasks now succesfully run on Github forks of the project. Attempts made to improve intermittent failures with the log-in action when run with Selenium. Work-in-progress. Regex correction for given block for ContentContext->thereArePosts() . Deprecated \u00b6 isWordpressError() moved into Util namespace. 0.5.0 - 2017-02-08 \u00b6 Added \u00b6 PHPCS rules. Scrutinizer-CI integration. Changed \u00b6 Website; switched from Couscous to MkDocs. Documentation. Travis-CI tweaks. Fixed \u00b6 Miscellanous driver fixes, especially WP-CLI over SSH. Again. 0.4.0 - 2017-01-30 \u00b6 Added \u00b6 Introduce sensiolabs/behat-page-object-extension for future development. Fixed \u00b6 Miscellanous driver fixes, especially WP-CLI over SSH. Changed \u00b6 Documentation. Website design and performance improvements. Travis-CI improvements. 0.3.0 - 2017-01-07 \u00b6 Added \u00b6 Miscellanous driver fixes. First pass at Contexts. Changed \u00b6 Documentation. 0.2.0 - 2016-11-26 \u00b6 Added \u00b6 WP-API and blackbox drivers. Website/documentation. Database import/export methods to drivers. Changed \u00b6 Adjusted exceptions thrown by DriverManager and Drivers. Design adjustments to website. Fixed \u00b6 Miscellanous WP-CLI driver fixes. 0.1.0 - 2016-09-22 \u00b6 Added \u00b6 First working version of basic architecture.","title":"News"},{"location":"changelog.html#news","text":"WordHat does not yet support WordPress\u2019 new content editor (Gutenberg). The step definitions for creating content assume, and only work with, the classic WordPress editor.","title":"News"},{"location":"changelog.html#320-2019-06-05","text":"","title":"3.2.0 - 2019-06-05"},{"location":"changelog.html#added","text":"CI: Run build checks on Travis-CI.","title":"Added"},{"location":"changelog.html#changed","text":"Composer: update dependencies to latest constrained versions ( #244 ). Composer, Dev Packages: switch wp-cli package to wp-cli-bundle . Mink: restart browser between scenarios instead of resetting ( #245 ). Contexts, User: tick \u201cremember me\u201d when a user logs-in to WordPress ( #245 ).","title":"Changed"},{"location":"changelog.html#fixed","text":"Update WordHat\u2019s internal tests for compatibility with recent versions of WordPress! Contexts, User: attempts made to improve intermittent failures with the log-in action ( #47 , #245 ). Drivers, WP-CLI: allow use of page_template when creating content ( #239 ).","title":"Fixed"},{"location":"changelog.html#312-2019-04-02","text":"","title":"3.1.2 - 2019-04-02"},{"location":"changelog.html#fixed_1","text":"Contexts, User: fix errors and exceptions caused by trying to log-out before a browser is open.","title":"Fixed"},{"location":"changelog.html#311-2019-02-27","text":"","title":"3.1.1 - 2019-02-27"},{"location":"changelog.html#changed_1","text":"Travis-CI/Appveyor automated checks have been temporarily removed from the project.","title":"Changed"},{"location":"changelog.html#fixed_2","text":"Contexts, User: attempts made to improve intermittent failures with the log-in action ( #47 ).","title":"Fixed"},{"location":"changelog.html#310-2018-12-28","text":"","title":"3.1.0 - 2018-12-28"},{"location":"changelog.html#changed_2","text":"Contexts, User: the \u201cgiven there are users\u2026\u201d step definition now auto-sets the new user\u2019s password ( #228 ). Drivers: Deprecate validateCredentials in UserElement classes; add no-op. Methods will be removed in 4.0.0 ( #220 ). Remove lazy assumption that a tested site has jQuery ( #213 ).","title":"Changed"},{"location":"changelog.html#fixed_3","text":"Website: improve kerning in project logo. Features: fix typo in feature/theme.feature . Drivers: fix finding content by post_title when sticky posts exist ( #218 ).","title":"Fixed"},{"location":"changelog.html#300-2018-08-09","text":"","title":"3.0.0 - 2018-08-09"},{"location":"changelog.html#changed_3","text":"Contexts, User: change \u201cI am logged in as \u2026\u201d step definition to disambiguate between role names and user names. e.g. \u201cGiven I am logged in as USER\u201d vs \u201cGiven I am logged in as an ROLE\u201d. Change users settings\u2019 format in behat.yml . Refer to website and/or behat.yml.dist . Github: update issue templates. Website: complete documentation of PHP exception error codes, and misc. tidy-up. Website: update mkDocs configuration for its latest version.","title":"Changed"},{"location":"changelog.html#removed","text":"Remove deprecated SnippetAcceptingContext context from Behat context generator. Use vendor/bin/behat --snippets-for=MyContext --append-snippets --dry-run instead.","title":"Removed"},{"location":"changelog.html#200-2018-06-03","text":"","title":"2.0.0 - 2018-06-03"},{"location":"changelog.html#added_1","text":"Website: add \u201cOpen Source\u201d page, and misc. SEO improvements. Drivers, WP-CLI: in CommentElement::create() , add support for comment_approved , comment_karma , and comment_type arguments.","title":"Added"},{"location":"changelog.html#changed_4","text":"WordHat now requires PHP 7.1+. Build tooling and continuous integration reliability improvements.","title":"Changed"},{"location":"changelog.html#fixed_4","text":"Fix null session when first step asserts a log-in.","title":"Fixed"},{"location":"changelog.html#120-2018-03-20","text":"","title":"1.2.0 - 2018-03-20"},{"location":"changelog.html#added_2","text":"All PHP exceptions now include an error code .","title":"Added"},{"location":"changelog.html#changed_5","text":"WP-CLI driver is more reliable at showing error messages from WP-CLI when something goes wrong.","title":"Changed"},{"location":"changelog.html#110-2018-03-05","text":"","title":"1.1.0 - 2018-03-05"},{"location":"changelog.html#added_3","text":"Support for running multiple drivers simultaneously. Minor PHPDoc adjustments. Minor website updates (primary navigation changes, and robots.txt).","title":"Added"},{"location":"changelog.html#changed_6","text":"Require WP-CLI v1.5+. Most of the internals now use strict typehinting. Drivers: the \u201cpath\u201d argument is now optional. Composer dependencies updated to more recent versions.","title":"Changed"},{"location":"changelog.html#fixed_5","text":"Step iAmViewingAuthorArchive now correctly accepts a user role as its parameter.","title":"Fixed"},{"location":"changelog.html#100-2018-01-18","text":"","title":"1.0.0 - 2018-01-18"},{"location":"changelog.html#added_4","text":"New step definitions (8 new, 7 changed, and 1 removed). Full test coverage for all step definitions and internal WordPress drivers. Improved documentation.","title":"Added"},{"location":"changelog.html#changed_7","text":"Now requires PHP 7+. Internal API adjustments: Contexts now only map step definitions to code, functions used by steps have been moved into traits, and drivers encapsulate CRUD operations). PHPDoc improvements. Use PHPStan for static analysis instead of Scrutinizer-CI. New Docker environment for Travis CI; increases build confidence and reliability.","title":"Changed"},{"location":"changelog.html#fixed_6","text":"Many issues discovered by completing our own test coverage. AppVeyor fixes.","title":"Fixed"},{"location":"changelog.html#092-2017-12-18","text":"","title":"0.9.2 - 2017-12-18"},{"location":"changelog.html#fixed_7","text":"Fix (more) invalid YAML.","title":"Fixed"},{"location":"changelog.html#091-2017-12-14","text":"","title":"0.9.1 - 2017-12-14"},{"location":"changelog.html#fixed_8","text":"Fix invalid YAML in services.yml.","title":"Fixed"},{"location":"changelog.html#090-2017-10-09","text":"","title":"0.9.0 - 2017-10-09"},{"location":"changelog.html#changed_8","text":"PHPDoc updated/tweaked. Rename some PageObjects classes for internal consistency.","title":"Changed"},{"location":"changelog.html#fixed_9","text":"Fix return value when creating users. Fix creating content with terms or meta, with WP-CLI driver.","title":"Fixed"},{"location":"changelog.html#removed_1","text":"Removed unused internal function isWordpressError() . Removed Composer package roave/security-advisories . Removed unused Context class.","title":"Removed"},{"location":"changelog.html#080-2017-09-18","text":"","title":"0.8.0 - 2017-09-18"},{"location":"changelog.html#added_5","text":"Finished implementing database content rollback options; consult documentation.","title":"Added"},{"location":"changelog.html#changed_9","text":"WordHat now requires PHP 7.0+. Renamed \u201cWP-API\u201d driver to \u201cWP-PHP\u201d (backwards-compatible, as long as you have not extended driver classes). Website; significant documentation update, especially for on-boarding new users. Path setting can now be a relative or absolute path. Previously, only absolute paths were supported.","title":"Changed"},{"location":"changelog.html#fixed_10","text":"Website; mkdocs-material theme update to latest version (accessibility fixes). Various PHPDoc improvements and corrections.","title":"Fixed"},{"location":"changelog.html#071-2017-08-21","text":"","title":"0.7.1 - 2017-08-21"},{"location":"changelog.html#changed_10","text":"Path setting can now be a relative or absolute path. Previously, only absolute paths were supported.","title":"Changed"},{"location":"changelog.html#070-2017-06-30","text":"","title":"0.7.0 - 2017-06-30"},{"location":"changelog.html#added_6","text":"ContentEditor and PostContentEditor page (element) objects for interacting with TinyMCE elements. EditPostContext . WidgetContext . Add optional redirect_to param to logIn() .","title":"Added"},{"location":"changelog.html#changed_11","text":"Driver interface re-organisation. See #21 .","title":"Changed"},{"location":"changelog.html#fixed_11","text":"If a browser window is not open when the BeforeStep event is run, then our call to Selenium2Driver::executeScript() will throw an exception. Compatibility with WordPress 4.8. Toolbar page object: fix calls to evaluateScript . Strict version requirement for WP-CLI. Links and buttons behind the WordPress\u2019 Toolbar cannot be interacted with.","title":"Fixed"},{"location":"changelog.html#deprecated","text":"Rename is_wordpress_error() to isWordPressError() .","title":"Deprecated"},{"location":"changelog.html#060-2017-04-05","text":"","title":"0.6.0 - 2017-04-05"},{"location":"changelog.html#added_7","text":"Initial support for sensiolabs/behat-page-object-extension with support for parts of wp-admin, and the Toolbar.","title":"Added"},{"location":"changelog.html#changed_12","text":"Documentation corrections; website and PHPDoc. WP-CLI driver no longer fails if the command returns text through stdout. Travis-CI reports job status to our Slack; join us at https://wordhat.herokuapp.com \ud83d\ude00 Composer requirements loosened for better compatibility with other projects.","title":"Changed"},{"location":"changelog.html#fixed_12","text":"Travis-CI tasks now succesfully run on Github forks of the project. Attempts made to improve intermittent failures with the log-in action when run with Selenium. Work-in-progress. Regex correction for given block for ContentContext->thereArePosts() .","title":"Fixed"},{"location":"changelog.html#deprecated_1","text":"isWordpressError() moved into Util namespace.","title":"Deprecated"},{"location":"changelog.html#050-2017-02-08","text":"","title":"0.5.0 - 2017-02-08"},{"location":"changelog.html#added_8","text":"PHPCS rules. Scrutinizer-CI integration.","title":"Added"},{"location":"changelog.html#changed_13","text":"Website; switched from Couscous to MkDocs. Documentation. Travis-CI tweaks.","title":"Changed"},{"location":"changelog.html#fixed_13","text":"Miscellanous driver fixes, especially WP-CLI over SSH. Again.","title":"Fixed"},{"location":"changelog.html#040-2017-01-30","text":"","title":"0.4.0 - 2017-01-30"},{"location":"changelog.html#added_9","text":"Introduce sensiolabs/behat-page-object-extension for future development.","title":"Added"},{"location":"changelog.html#fixed_14","text":"Miscellanous driver fixes, especially WP-CLI over SSH.","title":"Fixed"},{"location":"changelog.html#changed_14","text":"Documentation. Website design and performance improvements. Travis-CI improvements.","title":"Changed"},{"location":"changelog.html#030-2017-01-07","text":"","title":"0.3.0 - 2017-01-07"},{"location":"changelog.html#added_10","text":"Miscellanous driver fixes. First pass at Contexts.","title":"Added"},{"location":"changelog.html#changed_15","text":"Documentation.","title":"Changed"},{"location":"changelog.html#020-2016-11-26","text":"","title":"0.2.0 - 2016-11-26"},{"location":"changelog.html#added_11","text":"WP-API and blackbox drivers. Website/documentation. Database import/export methods to drivers.","title":"Added"},{"location":"changelog.html#changed_16","text":"Adjusted exceptions thrown by DriverManager and Drivers. Design adjustments to website.","title":"Changed"},{"location":"changelog.html#fixed_15","text":"Miscellanous WP-CLI driver fixes.","title":"Fixed"},{"location":"changelog.html#010-2016-09-22","text":"","title":"0.1.0 - 2016-09-22"},{"location":"changelog.html#added_12","text":"First working version of basic architecture.","title":"Added"},{"location":"credits.html","text":"Team \u00b6 Paul Gibbs : Project Lead Stephen Harris : Project Lead Richard Vodden Acknowledgements \u00b6 The team wish to thank the following projects and their contributors, who provide inspiration and were fantasically useful learning resources: Stephen Harris : stephenharris/WordPressBehatExtension John Blackbourn : johnbillion/WordPressBehatExtension Tom Forrer : tmf/WordPressExtension Walter Dal Mut : wdalmut/WordPressExtension Laracasts : laracasts/Behat-Laravel-Extension Ariel Gold : ari-gold/WordPress-Behat-Quickstart Extra special thanks is extended to Jonathan Hedstrom and his Behat Drupal Extension project. Much of the structure of this project is based on Jonathan\u2019s work, and this project is forever in its debt, having taken direct inspiration from its amazing technical architecture and innovative features. For making it straightforward to publish this documentation, the project would like to thank MkDocs and the Material for MkDocs theme. MkDocs generates HTML from Markdown, and does it wonderfully. If you have never seen a GitHub issue and pull request template generator featuring Cthulhu and Lewis Carroll, then you should check this one out . Finally, thank you for considering WordHat. It is a tool for developers by developers, and we hope it helps you achieve wonderful things. Thank you for making it part of your world.","title":"Credits"},{"location":"credits.html#team","text":"Paul Gibbs : Project Lead Stephen Harris : Project Lead Richard Vodden","title":"Team"},{"location":"credits.html#acknowledgements","text":"The team wish to thank the following projects and their contributors, who provide inspiration and were fantasically useful learning resources: Stephen Harris : stephenharris/WordPressBehatExtension John Blackbourn : johnbillion/WordPressBehatExtension Tom Forrer : tmf/WordPressExtension Walter Dal Mut : wdalmut/WordPressExtension Laracasts : laracasts/Behat-Laravel-Extension Ariel Gold : ari-gold/WordPress-Behat-Quickstart Extra special thanks is extended to Jonathan Hedstrom and his Behat Drupal Extension project. Much of the structure of this project is based on Jonathan\u2019s work, and this project is forever in its debt, having taken direct inspiration from its amazing technical architecture and innovative features. For making it straightforward to publish this documentation, the project would like to thank MkDocs and the Material for MkDocs theme. MkDocs generates HTML from Markdown, and does it wonderfully. If you have never seen a GitHub issue and pull request template generator featuring Cthulhu and Lewis Carroll, then you should check this one out . Finally, thank you for considering WordHat. It is a tool for developers by developers, and we hope it helps you achieve wonderful things. Thank you for making it part of your world.","title":"Acknowledgements"},{"location":"license.html","text":"License \u00b6 Copyright (C) 2016-present, Paul Gibbs. This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details . You should have received a copy of the GNU General Public License along with this program. If not, see http://www.gnu.org/licenses/ .","title":"License"},{"location":"license.html#license","text":"Copyright (C) 2016-present, Paul Gibbs. This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details . You should have received a copy of the GNU General Public License along with this program. If not, see http://www.gnu.org/licenses/ .","title":"License"},{"location":"configuration/settings.html","text":"Settings \u00b6 This documentaton refers to settings provided by the WordHat extension. Consult the Behat website for an overview of general settings, or the Mink website for settings relating to controlling a web browser. WordHat \u00b6 These are the options provided by the WordHat extension: PaulGibbs\\WordpressBehatExtension : default_driver : wpcli path : ~ # User settings. users : - roles : - administrator username : admin password : admin # WordPress settings. site_url : ~ permalinks : author_archive : author/%s/ database : restore_after_test : false backup_path : ~ # Driver settings. wpcli : alias : dev binary : wp Option Default value Description default_driver \u201cwpcli\u201d Optional . The WordPress driver to use (\u201cwpcli\u201d, \u201cwpphp\u201d). path null Optional . Path to WordPress files. users.* see example Optional . roles property can accept multiple values. site_url null Optional . If your WordPress is installed in a subdirectory, set this to the site_url() value. Defaults to mink.base_url . permalinks.* see example Optional . Permalink pattern for the specific kind of link. %s is replaced with an ID/object name, as appropriate. database.restore_after_test false Optional . If true , WordHat will restore your site\u2019s database to its initial state between feature tests . database.backup_path see example Optional . If restore_after_test is true, and the value is a file path, WordHat will use that as the back up to restore the database from. If the path is a directory, then before any tests are run, WordHat will generate a database back up and store it here. If the path has not been set, WordHat will choose its own temporary folder. wpcli.alias null Optional . WP-CLI alias (preferred over wpcli.path ). wpcli.binary wp Optional . Path and name of WP-CLI binary. Also supports shell commands (e.g. cd ~/bin && ./wp ). Per-environment settings \u00b6 Some of the settings in behat.yml are environment specific. For example, the base_url may be http://test.example.dev on your local development environment, while on a test server it might be http://test.example.com . If you intend to run your tests on different environments, these sorts of settings should not be added to your behat.yml . Instead, they should be exported in an environment variable. Before running tests, Behat will check the BEHAT_PARAMS environment variable and add these settings to the ones that are present in behat.yml (settings from this file takes precedence). This variable should contain a JSON object with your settings. Example JSON object: { \"extensions\" : { \"Behat\\\\MinkExtension\" : { \"base_url\" : \"http://development.dev\" } } } To export this to the BEHAT_PARAMS environment variable on a Linux or MacOS system, squash the JSON object into a single line and surround with single quotes: export BEHAT_PARAMS = '{\"extensions\":{\"Behat\\\\MinkExtension\":{\"base_url\":\"http://development.dev\"}}}'","title":"Settings"},{"location":"configuration/settings.html#settings","text":"This documentaton refers to settings provided by the WordHat extension. Consult the Behat website for an overview of general settings, or the Mink website for settings relating to controlling a web browser.","title":"Settings"},{"location":"configuration/settings.html#wordhat","text":"These are the options provided by the WordHat extension: PaulGibbs\\WordpressBehatExtension : default_driver : wpcli path : ~ # User settings. users : - roles : - administrator username : admin password : admin # WordPress settings. site_url : ~ permalinks : author_archive : author/%s/ database : restore_after_test : false backup_path : ~ # Driver settings. wpcli : alias : dev binary : wp Option Default value Description default_driver \u201cwpcli\u201d Optional . The WordPress driver to use (\u201cwpcli\u201d, \u201cwpphp\u201d). path null Optional . Path to WordPress files. users.* see example Optional . roles property can accept multiple values. site_url null Optional . If your WordPress is installed in a subdirectory, set this to the site_url() value. Defaults to mink.base_url . permalinks.* see example Optional . Permalink pattern for the specific kind of link. %s is replaced with an ID/object name, as appropriate. database.restore_after_test false Optional . If true , WordHat will restore your site\u2019s database to its initial state between feature tests . database.backup_path see example Optional . If restore_after_test is true, and the value is a file path, WordHat will use that as the back up to restore the database from. If the path is a directory, then before any tests are run, WordHat will generate a database back up and store it here. If the path has not been set, WordHat will choose its own temporary folder. wpcli.alias null Optional . WP-CLI alias (preferred over wpcli.path ). wpcli.binary wp Optional . Path and name of WP-CLI binary. Also supports shell commands (e.g. cd ~/bin && ./wp ).","title":"WordHat"},{"location":"configuration/settings.html#per-environment-settings","text":"Some of the settings in behat.yml are environment specific. For example, the base_url may be http://test.example.dev on your local development environment, while on a test server it might be http://test.example.com . If you intend to run your tests on different environments, these sorts of settings should not be added to your behat.yml . Instead, they should be exported in an environment variable. Before running tests, Behat will check the BEHAT_PARAMS environment variable and add these settings to the ones that are present in behat.yml (settings from this file takes precedence). This variable should contain a JSON object with your settings. Example JSON object: { \"extensions\" : { \"Behat\\\\MinkExtension\" : { \"base_url\" : \"http://development.dev\" } } } To export this to the BEHAT_PARAMS environment variable on a Linux or MacOS system, squash the JSON object into a single line and surround with single quotes: export BEHAT_PARAMS = '{\"extensions\":{\"Behat\\\\MinkExtension\":{\"base_url\":\"http://development.dev\"}}}'","title":"Per-environment settings"},{"location":"contributing/build.html","text":"The build process and continuous integration \u00b6 There are two styles of build which WordHat uses. One is a native build where WordHat, Wordpress, Selenium and other tools are run directly on the native platform. The other is a docker build where docker containers are used to host Wordhat, Wordpress, Selenium and Mysql. Making it work locally. \u00b6 The first thing you need to do is to install Docker. It is highly recommended that if you\u2019re on windows, you use Docker Toolbox as its support for linux containers is significantly better than the Windows native docker. We\u2019ll keep trying it, and if that changes we\u2019ll update this page. Once you have docker installed, (and if you\u2019re running docker toolbox you\u2019ve spun up a Docker terminal); simply clone the wordhat source, run composer install and then vendor/bin/phing and you\u2019ll be laughing. Making it work natively locally \u00b6 So maybe you\u2019ve already got a wordpress installation locally that you\u2019d like to use, and its running in a local webserver. That\u2019s cool - this is how to do it. You\u2019ll also need to set up your own Selenium server if you want to run the javascript tests. Firstly you\u2019ll need to create a file called build/properties/local.yml . Give it contents which are similar to the below, only with the values tweaked to suit your environemnt. wordhat : base-url : http://localhost:8080 wd-host : localhost:4444/wd/hub wp-cli-binary : c:\\projects\\wordhat\\vendor\\bin\\wp wp-path : c:\\inetpub\\wwwroot db-restore : true driver : wpcli Once you\u2019ve done that, do a composer install followed by vendor/bin/phing -Dwordhat.runstyle=native -Dwordhat.ci-engine=local and you should be laughing. Helpful Phings \u00b6 We use phing to glue together all the tools we use to develop WordHat. We\u2019ve only just got it set up, so if you find issues please do let us know either by raising an issue on GitHub or by jumping on our slack channel. Even though its early days, we\u2019ve got some cool stuff setup to help you debug your WordHat contributions. Docker tricks \u00b6 Firstly if your Docker run fails, we don\u2019t automatically clear up. This means the containers are all still there for you to inspect. If you\u2019d like to get to a shell on the WordHat (which is also the WordPress) container, then simply run this command: docker exec -it docker_wordpress_1 \"/bin/bash\" If you need a root shell, then this command will do it: docker exec -u root -it docker_wordpress_1 \"/bin/bash\" If you\u2019d like to set off another test run then: docker exec -it docker_wordpress_1 \"vendor/bin/phing behat:exec-tests\" And finally, when you\u2019ve finished diagnosing, run: vendor/bin/phing docker:stop docker:cleanup and all the containers will be tidied away and their persistent storage deleted.","title":"Build Process"},{"location":"contributing/build.html#the-build-process-and-continuous-integration","text":"There are two styles of build which WordHat uses. One is a native build where WordHat, Wordpress, Selenium and other tools are run directly on the native platform. The other is a docker build where docker containers are used to host Wordhat, Wordpress, Selenium and Mysql.","title":"The build process and continuous integration"},{"location":"contributing/build.html#making-it-work-locally","text":"The first thing you need to do is to install Docker. It is highly recommended that if you\u2019re on windows, you use Docker Toolbox as its support for linux containers is significantly better than the Windows native docker. We\u2019ll keep trying it, and if that changes we\u2019ll update this page. Once you have docker installed, (and if you\u2019re running docker toolbox you\u2019ve spun up a Docker terminal); simply clone the wordhat source, run composer install and then vendor/bin/phing and you\u2019ll be laughing.","title":"Making it work locally."},{"location":"contributing/build.html#making-it-work-natively-locally","text":"So maybe you\u2019ve already got a wordpress installation locally that you\u2019d like to use, and its running in a local webserver. That\u2019s cool - this is how to do it. You\u2019ll also need to set up your own Selenium server if you want to run the javascript tests. Firstly you\u2019ll need to create a file called build/properties/local.yml . Give it contents which are similar to the below, only with the values tweaked to suit your environemnt. wordhat : base-url : http://localhost:8080 wd-host : localhost:4444/wd/hub wp-cli-binary : c:\\projects\\wordhat\\vendor\\bin\\wp wp-path : c:\\inetpub\\wwwroot db-restore : true driver : wpcli Once you\u2019ve done that, do a composer install followed by vendor/bin/phing -Dwordhat.runstyle=native -Dwordhat.ci-engine=local and you should be laughing.","title":"Making it work natively locally"},{"location":"contributing/build.html#helpful-phings","text":"We use phing to glue together all the tools we use to develop WordHat. We\u2019ve only just got it set up, so if you find issues please do let us know either by raising an issue on GitHub or by jumping on our slack channel. Even though its early days, we\u2019ve got some cool stuff setup to help you debug your WordHat contributions.","title":"Helpful Phings"},{"location":"contributing/build.html#docker-tricks","text":"Firstly if your Docker run fails, we don\u2019t automatically clear up. This means the containers are all still there for you to inspect. If you\u2019d like to get to a shell on the WordHat (which is also the WordPress) container, then simply run this command: docker exec -it docker_wordpress_1 \"/bin/bash\" If you need a root shell, then this command will do it: docker exec -u root -it docker_wordpress_1 \"/bin/bash\" If you\u2019d like to set off another test run then: docker exec -it docker_wordpress_1 \"vendor/bin/phing behat:exec-tests\" And finally, when you\u2019ve finished diagnosing, run: vendor/bin/phing docker:stop docker:cleanup and all the containers will be tidied away and their persistent storage deleted.","title":"Docker tricks"},{"location":"contributing/open-source.html","text":"Contributing to WordHat \u00b6 Communication standards \u00b6 Communication is oxygen . Talk with us on Github , or on our Slack chat room. Ask, don\u2019t assume . This project only accepts pull requests related to open issues. If you are proposing a new feature or change, please discuss it in an issue first. Technicial standards \u00b6 PSR-1: Basic Coding Standard . PSR-2: Coding Style Guide . PSR-4: Autoloading Standard . Delimit variable and property names by underscore. Prefer short array syntax ( [ ] ). For code files, keep maximumum line lengths to around ~120 characters. The website documentation is to be written in British English (\u201cen-GB\u201d). You can do some things to increase the chance that a change request or pull request is accepted the first time: Run composer commit to fix code standard errors. Submit one pull request per fix or feature. If your changes are not up to date \u2013 rebase your branch on the parent branch. Follow the conventions used in the project. Remember about documentation. Do not bump the version number.","title":"Contributing"},{"location":"contributing/open-source.html#contributing-to-wordhat","text":"","title":"Contributing to WordHat"},{"location":"contributing/open-source.html#communication-standards","text":"Communication is oxygen . Talk with us on Github , or on our Slack chat room. Ask, don\u2019t assume . This project only accepts pull requests related to open issues. If you are proposing a new feature or change, please discuss it in an issue first.","title":"Communication standards"},{"location":"contributing/open-source.html#technicial-standards","text":"PSR-1: Basic Coding Standard . PSR-2: Coding Style Guide . PSR-4: Autoloading Standard . Delimit variable and property names by underscore. Prefer short array syntax ( [ ] ). For code files, keep maximumum line lengths to around ~120 characters. The website documentation is to be written in British English (\u201cen-GB\u201d). You can do some things to increase the chance that a change request or pull request is accepted the first time: Run composer commit to fix code standard errors. Submit one pull request per fix or feature. If your changes are not up to date \u2013 rebase your branch on the parent branch. Follow the conventions used in the project. Remember about documentation. Do not bump the version number.","title":"Technicial standards"},{"location":"features/overview.html","text":"Overview \u00b6 WordHat provides WordPress-specific functionality for common testing scenarios that are specific to WordPress sites. We do this by providing a range of Behat contexts that provide useful step definitions. For convenience, our behat.yml.dist configuration template loads all of our contexts by default, though Behat does support more complex configuration for advanced use cases. To find out which step definitions are available for your tests, run vendor/bin/behat -dl in your terminal. Drivers \u00b6 The Given and When steps in a Behat Scenario configure a WordPress into a known state for reliable testing. WordHat abstracts this communication between WordPress and itself into a drivers system. Two drivers are currently provided: WP-CLI (the default), and WP-PHP. Drivers WordHat only uses a driver to configure a WordPress into a known state. Your actual tests are run in a web browser, via Mink . To configure WordHat to use a specific driver, set default_driver in your behat.yml . WP-CLI \u00b6 The WP-CLI driver uses WP-CLI to connect to WordPress. This is the default and recommended driver, and allows you to run your tests and your WordPress site on different servers . WP-PHP \u00b6 The WP-PHP driver loads WordPress by bootstrapping it directly. This approach was taken from WordPress\u2019 PHPUnit integration test framework . You have to run your tests directly on your WordPress server. Contexts \u00b6 Content \u00b6 The ContentContext context provides a range of step definitions for managing post types, taxonomy terms, and comments. Debug \u00b6 The DebugContext context provides step definitions to help debug Scenarios during development. Site \u00b6 The SiteContext context provides step definitions for activating/deactivating plugins, switching themes, and clearing the object cache. TinyMCE \u00b6 The EditPost context provides step definitions to manage editing and creating content within wp-admin. Toolbar \u00b6 The ToolbarContext context provides step definitions to interact with the WordPress Toolbar. User \u00b6 The UserContext context provides a range of step definitions for managing users. Widget \u00b6 The WidgetContext context provides step definitions to add/remove widgets from sidebars. wp-admin \u00b6 The Dashboard context provides a range of step definitions for generally interacting with, and navigating around, the WordPress administration screens (i.e. wp-admin).","title":"Overview"},{"location":"features/overview.html#overview","text":"WordHat provides WordPress-specific functionality for common testing scenarios that are specific to WordPress sites. We do this by providing a range of Behat contexts that provide useful step definitions. For convenience, our behat.yml.dist configuration template loads all of our contexts by default, though Behat does support more complex configuration for advanced use cases. To find out which step definitions are available for your tests, run vendor/bin/behat -dl in your terminal.","title":"Overview"},{"location":"features/overview.html#drivers","text":"The Given and When steps in a Behat Scenario configure a WordPress into a known state for reliable testing. WordHat abstracts this communication between WordPress and itself into a drivers system. Two drivers are currently provided: WP-CLI (the default), and WP-PHP. Drivers WordHat only uses a driver to configure a WordPress into a known state. Your actual tests are run in a web browser, via Mink . To configure WordHat to use a specific driver, set default_driver in your behat.yml .","title":"Drivers"},{"location":"features/overview.html#wp-cli","text":"The WP-CLI driver uses WP-CLI to connect to WordPress. This is the default and recommended driver, and allows you to run your tests and your WordPress site on different servers .","title":"WP-CLI"},{"location":"features/overview.html#wp-php","text":"The WP-PHP driver loads WordPress by bootstrapping it directly. This approach was taken from WordPress\u2019 PHPUnit integration test framework . You have to run your tests directly on your WordPress server.","title":"WP-PHP"},{"location":"features/overview.html#contexts","text":"","title":"Contexts"},{"location":"features/overview.html#content","text":"The ContentContext context provides a range of step definitions for managing post types, taxonomy terms, and comments.","title":"Content"},{"location":"features/overview.html#debug","text":"The DebugContext context provides step definitions to help debug Scenarios during development.","title":"Debug"},{"location":"features/overview.html#site","text":"The SiteContext context provides step definitions for activating/deactivating plugins, switching themes, and clearing the object cache.","title":"Site"},{"location":"features/overview.html#tinymce","text":"The EditPost context provides step definitions to manage editing and creating content within wp-admin.","title":"TinyMCE"},{"location":"features/overview.html#toolbar","text":"The ToolbarContext context provides step definitions to interact with the WordPress Toolbar.","title":"Toolbar"},{"location":"features/overview.html#user","text":"The UserContext context provides a range of step definitions for managing users.","title":"User"},{"location":"features/overview.html#widget","text":"The WidgetContext context provides step definitions to add/remove widgets from sidebars.","title":"Widget"},{"location":"features/overview.html#wp-admin","text":"The Dashboard context provides a range of step definitions for generally interacting with, and navigating around, the WordPress administration screens (i.e. wp-admin).","title":"wp-admin"},{"location":"getting-started/behat-intro.html","text":"Behat \u00b6 Behat is a test framework for Behavior Driven Development (BDD) in PHP . BDD is a methodology for developing software through continuous example-based communication between developers and a business. This communication happens in a form that both the business and developers can clearly understand: examples. The examples are structured around a \u201cContext, Event, Outcome\u201d pattern. Context, Event, Outcome \u00b6 In Behat, tests are organised into Scenarios, and multiple Scenarios are grouped into Features. Feature files start with the story of the business feature being tested (one per file), followed by at least one Scenario. Each Scenario consists of a list of Steps, which must start with one of the following keywords: Given , When , Then , But , And . A Scenario always follows the same basic format: Scenario: Some description of the scenario Given some context When some event Then outcome Each part of the Scenario \u2013 the context, the event, and the outcome \u2013 can be extended by using the And or But keywords: Scenario: Some description of the scenario Given some context And more context When some event And second event occurs Then outcome And another outcome But another outcome Did you know? There is no difference between the Then , And , and But keywords. Use each appropriately to write Scenarios that are natural and readable. Features \u00b6 Imagine that we are building a new e-commerce website. One of the key features of any online shop is the ability to buy products, but before buying anything, customers need to be able to tell the shop which products they want to buy. We need a shopping basket. With this, we can create our first user story: Feature: Shopping basket In order to buy products As a customer I need to be able to put interesting products into a basket Before we start development, we must have a real conversation with our business stakeholders; they might say that they want customers to not only see the combined price of the products in the basket, but also the price reflecting the tax and the delivery cost (which depends on the total price of the products): Feature: Shopping basket In order to buy products As a customer I need to be able to put interesting products into a basket Rules: - Tax is 20% - Delivery for basket under \u00a310 is \u00a33 - Delivery for basket over \u00a310 is \u00a32 Summary Features are a simple description of a user story. The format is always the same: the title of the feature, followed by three lines that describe the benefit, the role, and the feature itself. On subsequent lines, we can add any amount of additional description (such as the rules section, in this example). In isolation, each rule by itself is understandable, but there is ambiguous complexity when we try to describe the feature in terms of rules . For example, what does it mean to add tax? What happens when we have two products, one of which is less than \u00a310, and another one that is more? To resolve this, we must have another conversation with our business stakeholders. This will often take the form of actual examples of a customer adding products to the basket. After some back-and-forth, we agree upon a list of behaviour examples. In BDD , these are called Scenarios . Scenarios \u00b6 After conversation with our business stakeholders, we came up with the following: Feature: Shopping basket In order to buy products As a customer I need to be able to put interesting products into a basket Rules: - Tax is 20% - Delivery for basket under \u00a310 is \u00a33 - Delivery for basket over \u00a310 is \u00a32 Scenario: Buying a single product under \u00a310 Given there is a \" self-sealing stem bolt \", which costs \u00a3 5 When I add the \" self-sealing stem bolt \" to the basket Then I should have 1 product in the basket And the overall basket price should be \u00a3 9 Scenario: Buying a single product over \u00a310 Given there is \" yamok sauce \", which costs \u00a3 15 When I add the \" yamok sauce \" to the basket Then I should have 1 product in the basket And the overall basket price should be \u00a3 20 Scenario: Buying two products over \u00a310 Given there is \" yamok sauce \", which costs \u00a3 10 And there is a \" self-sealing stem bolt \", which costs \u00a3 5 When I add the \" yamok sauce \" to the basket And I add the \" self-sealing stem bolt \" to the basket Then I should have 2 products in the basket And the overall basket price should be \u00a3 20 Did you know? Scenarios in Feature files should focus on the what , rather than the how . Each Scenario should be concise and to the point, so that the reader can quickly grasp the intent of the test without having to read a lot of irrelevant steps. The totality of the above represents our business\u2019 shared understanding of our project, written in a structured format. It is based on the clear and constructive conversation we had together with our business stakeholders. This, in essence, is what BDD is. Contexts \u00b6 Behat allows us to automate behaviour checks by comparing the prescribed behaviour against a system\u2019s actual behavior. Before Behat can do this, we need to teach it how to understand our structured language \u2013 otherwise, how is it meant to understand what we mean by \u201cthen I should have 2 products in the basket\u201d? Contexts are PHP objects that tell Behat how to test Features. Behat parses the PHPDoc annotation to map instructions in a Scenario, to methods within Context objects (known as a Step Definition). Summary Feature files describe how a system should behave, and Contexts explain how to test it. A Context always follows the same basic format: <?php class FeatureContext implements \\Behat\\Behat\\Context\\Context { /** @Given some context */ public function prepareContext () { // Do something. } /** @When some event */ public function doSomeEvent () { // Do something. } /** @Then outcome */ public function checkOutcome () { // Do something. } } The @Given , @When , and @Then keywords allow Behat to match a Step to a method. In the annotation, Behat can capture tokens (words starting with a colon, e.g. :arg1 ) and pass their value to the method as arguments. Behat also supports optionally matching part of an Step using brackets. Did you know? To facilitate more complex matching requirements, Behat supports regular expressions. An example of a Step Definition required for our e-commerce website is: <?php /** * @Given there is a(n) :arg1, which costs \u00a3:arg2 */ public function thereIsAWhichCosts ( $arg1 , $arg2 ) { // Check $arg1 costs $arg2. // Add $arg1 to shopping basket. // If something goes wrong, throw an Exception. } The PHPDoc annotation for this method tells Behat that the method should be executed whenever Behat sees a Step that looks like ... there is a ..., which costs \u00a3... . This pattern will match any of the following Steps: Given there is a \"self-sealing stem bolt\", which costs \u00a35 Given there is a \"self-sealing stem bolt\", which costs \u00a310 Given there is an 'automated assembler', which costs \u00a310 Given there is a bolt, which costs \u00a32 Next steps \u00b6 This guide has introduced the basics of Behat and BDD . To learn more, we recommend the following websites and presentations: Jessica Mauerhan: \u201c Behat: Beyond the Basic \u201d. Knp University: \u201c BDD, Behat, Mink and other Wonderful Things \u201d. Inviqa: \u201c The beginner\u2019s guide to BDD \u201d. Andy Knight: \u201c The Behavior-Driven Three Amigos \u201d. You are now ready to begin working with WordHat, but we recommend reviewing our best practices for configuring WordHat for your project.","title":"Intro to Behat"},{"location":"getting-started/behat-intro.html#behat","text":"Behat is a test framework for Behavior Driven Development (BDD) in PHP . BDD is a methodology for developing software through continuous example-based communication between developers and a business. This communication happens in a form that both the business and developers can clearly understand: examples. The examples are structured around a \u201cContext, Event, Outcome\u201d pattern.","title":"Behat"},{"location":"getting-started/behat-intro.html#context-event-outcome","text":"In Behat, tests are organised into Scenarios, and multiple Scenarios are grouped into Features. Feature files start with the story of the business feature being tested (one per file), followed by at least one Scenario. Each Scenario consists of a list of Steps, which must start with one of the following keywords: Given , When , Then , But , And . A Scenario always follows the same basic format: Scenario: Some description of the scenario Given some context When some event Then outcome Each part of the Scenario \u2013 the context, the event, and the outcome \u2013 can be extended by using the And or But keywords: Scenario: Some description of the scenario Given some context And more context When some event And second event occurs Then outcome And another outcome But another outcome Did you know? There is no difference between the Then , And , and But keywords. Use each appropriately to write Scenarios that are natural and readable.","title":"Context, Event, Outcome"},{"location":"getting-started/behat-intro.html#features","text":"Imagine that we are building a new e-commerce website. One of the key features of any online shop is the ability to buy products, but before buying anything, customers need to be able to tell the shop which products they want to buy. We need a shopping basket. With this, we can create our first user story: Feature: Shopping basket In order to buy products As a customer I need to be able to put interesting products into a basket Before we start development, we must have a real conversation with our business stakeholders; they might say that they want customers to not only see the combined price of the products in the basket, but also the price reflecting the tax and the delivery cost (which depends on the total price of the products): Feature: Shopping basket In order to buy products As a customer I need to be able to put interesting products into a basket Rules: - Tax is 20% - Delivery for basket under \u00a310 is \u00a33 - Delivery for basket over \u00a310 is \u00a32 Summary Features are a simple description of a user story. The format is always the same: the title of the feature, followed by three lines that describe the benefit, the role, and the feature itself. On subsequent lines, we can add any amount of additional description (such as the rules section, in this example). In isolation, each rule by itself is understandable, but there is ambiguous complexity when we try to describe the feature in terms of rules . For example, what does it mean to add tax? What happens when we have two products, one of which is less than \u00a310, and another one that is more? To resolve this, we must have another conversation with our business stakeholders. This will often take the form of actual examples of a customer adding products to the basket. After some back-and-forth, we agree upon a list of behaviour examples. In BDD , these are called Scenarios .","title":"Features"},{"location":"getting-started/behat-intro.html#scenarios","text":"After conversation with our business stakeholders, we came up with the following: Feature: Shopping basket In order to buy products As a customer I need to be able to put interesting products into a basket Rules: - Tax is 20% - Delivery for basket under \u00a310 is \u00a33 - Delivery for basket over \u00a310 is \u00a32 Scenario: Buying a single product under \u00a310 Given there is a \" self-sealing stem bolt \", which costs \u00a3 5 When I add the \" self-sealing stem bolt \" to the basket Then I should have 1 product in the basket And the overall basket price should be \u00a3 9 Scenario: Buying a single product over \u00a310 Given there is \" yamok sauce \", which costs \u00a3 15 When I add the \" yamok sauce \" to the basket Then I should have 1 product in the basket And the overall basket price should be \u00a3 20 Scenario: Buying two products over \u00a310 Given there is \" yamok sauce \", which costs \u00a3 10 And there is a \" self-sealing stem bolt \", which costs \u00a3 5 When I add the \" yamok sauce \" to the basket And I add the \" self-sealing stem bolt \" to the basket Then I should have 2 products in the basket And the overall basket price should be \u00a3 20 Did you know? Scenarios in Feature files should focus on the what , rather than the how . Each Scenario should be concise and to the point, so that the reader can quickly grasp the intent of the test without having to read a lot of irrelevant steps. The totality of the above represents our business\u2019 shared understanding of our project, written in a structured format. It is based on the clear and constructive conversation we had together with our business stakeholders. This, in essence, is what BDD is.","title":"Scenarios"},{"location":"getting-started/behat-intro.html#contexts","text":"Behat allows us to automate behaviour checks by comparing the prescribed behaviour against a system\u2019s actual behavior. Before Behat can do this, we need to teach it how to understand our structured language \u2013 otherwise, how is it meant to understand what we mean by \u201cthen I should have 2 products in the basket\u201d? Contexts are PHP objects that tell Behat how to test Features. Behat parses the PHPDoc annotation to map instructions in a Scenario, to methods within Context objects (known as a Step Definition). Summary Feature files describe how a system should behave, and Contexts explain how to test it. A Context always follows the same basic format: <?php class FeatureContext implements \\Behat\\Behat\\Context\\Context { /** @Given some context */ public function prepareContext () { // Do something. } /** @When some event */ public function doSomeEvent () { // Do something. } /** @Then outcome */ public function checkOutcome () { // Do something. } } The @Given , @When , and @Then keywords allow Behat to match a Step to a method. In the annotation, Behat can capture tokens (words starting with a colon, e.g. :arg1 ) and pass their value to the method as arguments. Behat also supports optionally matching part of an Step using brackets. Did you know? To facilitate more complex matching requirements, Behat supports regular expressions. An example of a Step Definition required for our e-commerce website is: <?php /** * @Given there is a(n) :arg1, which costs \u00a3:arg2 */ public function thereIsAWhichCosts ( $arg1 , $arg2 ) { // Check $arg1 costs $arg2. // Add $arg1 to shopping basket. // If something goes wrong, throw an Exception. } The PHPDoc annotation for this method tells Behat that the method should be executed whenever Behat sees a Step that looks like ... there is a ..., which costs \u00a3... . This pattern will match any of the following Steps: Given there is a \"self-sealing stem bolt\", which costs \u00a35 Given there is a \"self-sealing stem bolt\", which costs \u00a310 Given there is an 'automated assembler', which costs \u00a310 Given there is a bolt, which costs \u00a32","title":"Contexts"},{"location":"getting-started/behat-intro.html#next-steps","text":"This guide has introduced the basics of Behat and BDD . To learn more, we recommend the following websites and presentations: Jessica Mauerhan: \u201c Behat: Beyond the Basic \u201d. Knp University: \u201c BDD, Behat, Mink and other Wonderful Things \u201d. Inviqa: \u201c The beginner\u2019s guide to BDD \u201d. Andy Knight: \u201c The Behavior-Driven Three Amigos \u201d. You are now ready to begin working with WordHat, but we recommend reviewing our best practices for configuring WordHat for your project.","title":"Next steps"},{"location":"getting-started/installation.html","text":"Installing WordHat \u00b6 Requirements \u00b6 WordHat requires PHP (version 7.1+), Composer , and a WordPress site to test (version 4.8+). We strongly recommend using WP-CLI 1 (version 2.1.0+), and Selenium 2 to help with browser automation. Selenium is fiddly to set up, so we recommend using vvo/selenium-standalone , which requires the Java Platform JDK . Installation \u00b6 Create a folder for your tests. From a terminal: mkdir project cd project Tell Composer to download WordHat: composer require --dev paulgibbs/behat-wordpress-extension behat/mink-goutte-driver behat/mink-selenium2-driver Copy WordHat's sample configuration file into your project folder and rename it: cp vendor/paulgibbs/behat-wordpress-extension/behat.yml.dist behat.yml Edit your behat.yml and: Update the base_url setting with the URL of the website that you intend to test. Update the path setting with either the relative or absolute path to your WordPress' files. Update the users section, and specify a username and password of an administrator user account in your WordPress. If your WordPress is installed in a subdirectory, consult the FAQ for information about the site_url setting . Initialise Behat : vendor/bin/behat --init What does this do? This creates a features/ folder for your Features (tests) , and a new Context class . These will come in handy later! To confirm that everything is set up correctly, run: vendor/bin/behat -dl If it worked, you will see a list of text that looks a little like the following (but much longer): Given I am an anonymous user Given I am not logged in Given I am logged in as a user with the :role role(s) Given I am logged in as :name \u2026 Next steps \u00b6 Now that you have WordHat set up, we recommend reading our introduction to Behat to help you learn the basics before you start writing tests for your site. The WP-CLI executable must be named wp and be within your system\u2019s $PATH . \u21a9 Selenium is recommended for testing websites that require Javascript . Behat requires the Mink Selenium2 library , which we include in the installation instructions above. \u21a9","title":"Installation"},{"location":"getting-started/installation.html#installing-wordhat","text":"","title":"Installing WordHat"},{"location":"getting-started/installation.html#requirements","text":"WordHat requires PHP (version 7.1+), Composer , and a WordPress site to test (version 4.8+). We strongly recommend using WP-CLI 1 (version 2.1.0+), and Selenium 2 to help with browser automation. Selenium is fiddly to set up, so we recommend using vvo/selenium-standalone , which requires the Java Platform JDK .","title":"Requirements"},{"location":"getting-started/installation.html#installation","text":"Create a folder for your tests. From a terminal: mkdir project cd project Tell Composer to download WordHat: composer require --dev paulgibbs/behat-wordpress-extension behat/mink-goutte-driver behat/mink-selenium2-driver Copy WordHat's sample configuration file into your project folder and rename it: cp vendor/paulgibbs/behat-wordpress-extension/behat.yml.dist behat.yml Edit your behat.yml and: Update the base_url setting with the URL of the website that you intend to test. Update the path setting with either the relative or absolute path to your WordPress' files. Update the users section, and specify a username and password of an administrator user account in your WordPress. If your WordPress is installed in a subdirectory, consult the FAQ for information about the site_url setting . Initialise Behat : vendor/bin/behat --init What does this do? This creates a features/ folder for your Features (tests) , and a new Context class . These will come in handy later! To confirm that everything is set up correctly, run: vendor/bin/behat -dl If it worked, you will see a list of text that looks a little like the following (but much longer): Given I am an anonymous user Given I am not logged in Given I am logged in as a user with the :role role(s) Given I am logged in as :name \u2026","title":"Installation"},{"location":"getting-started/installation.html#next-steps","text":"Now that you have WordHat set up, we recommend reading our introduction to Behat to help you learn the basics before you start writing tests for your site. The WP-CLI executable must be named wp and be within your system\u2019s $PATH . \u21a9 Selenium is recommended for testing websites that require Javascript . Behat requires the Mink Selenium2 library , which we include in the installation instructions above. \u21a9","title":"Next steps"},{"location":"getting-started/wordhat-intro.html","text":"WordHat \u00b6 When you start a new project with Behat, perhaps the first things to think about \u2013 after integrating BDD into your workflow \u2013 will be getting browser automation working, and writing your first tests. Otherwise, if you are unsure how to proceed, first check the FAQ and the other recipe pages in the menu. These will be added to when we receive repeat questions. If you encounter a bug, have a suggestion, or would like to help the project grow, please get in contact via Github or our Slack . Browser automation \u00b6 One of the fun things about using Behat is seeing it control your web browser and navigating your site. Behat relies on a library called Mink to interface with your web browser. Mink has its own driver system, with each driver supporting a different combination of browser features . Some Mink drivers run headless web browsers (e.g. Goutte), and these tend to be the fastest, though notably, most do not support Javascript. WordHat\u2019s sample configuration file is configured to use Selenium , which supports a broad range of browser features for most use cases. Selenium is fiddly to set up, so we recommend using vvo/selenium-standalone . For tests requiring Javascript interactions, mark the scenario or feature with the @javascript tag . Your first tests \u00b6 To confirm your Behat set up is working, copy any one (or all!) of WordHat\u2019s own tests from vendor/paulgibbs/behat-wordpress-extension/features/*.feature into your project\u2019s features/ folder. Run Behat with vendor/bin/behat , and the tests you copied should pass if everything is working.","title":"WordHat"},{"location":"getting-started/wordhat-intro.html#wordhat","text":"When you start a new project with Behat, perhaps the first things to think about \u2013 after integrating BDD into your workflow \u2013 will be getting browser automation working, and writing your first tests. Otherwise, if you are unsure how to proceed, first check the FAQ and the other recipe pages in the menu. These will be added to when we receive repeat questions. If you encounter a bug, have a suggestion, or would like to help the project grow, please get in contact via Github or our Slack .","title":"WordHat"},{"location":"getting-started/wordhat-intro.html#browser-automation","text":"One of the fun things about using Behat is seeing it control your web browser and navigating your site. Behat relies on a library called Mink to interface with your web browser. Mink has its own driver system, with each driver supporting a different combination of browser features . Some Mink drivers run headless web browsers (e.g. Goutte), and these tend to be the fastest, though notably, most do not support Javascript. WordHat\u2019s sample configuration file is configured to use Selenium , which supports a broad range of browser features for most use cases. Selenium is fiddly to set up, so we recommend using vvo/selenium-standalone . For tests requiring Javascript interactions, mark the scenario or feature with the @javascript tag .","title":"Browser automation"},{"location":"getting-started/wordhat-intro.html#your-first-tests","text":"To confirm your Behat set up is working, copy any one (or all!) of WordHat\u2019s own tests from vendor/paulgibbs/behat-wordpress-extension/features/*.feature into your project\u2019s features/ folder. Run Behat with vendor/bin/behat , and the tests you copied should pass if everything is working.","title":"Your first tests"},{"location":"recipes/content.html","text":"Database content \u00b6 Your tests will probably create WordPress content during their execution, and you need to remove that content from the database after each test. It is important to distinguish between persistent and non-persistent database content: When Behat starts, that initial state of the database is persisted through all tests. Database modifications made during a test, on the other hand, are not persistent. This means that database operations performed from within a test, such as the creation of posts or users, should be discarded after each test. When you write tests that create, update, or delete content in the database, mark the scenario or feature with the @db tag . Non-persistent content \u00b6 You can either take care of removing non-persistent content yourself, perhaps by using a Behat hook in a custom context class, or by scripting it into a CI process, or by letting WordHat do this for you. Setting database.restore_after_test in your behat.yml to true will have WordHat back up the database when first invoked, and then restore the database from that back up after each scenario. We strongly recommend using the WP-CLI driver when this is enabled. Persistent content \u00b6 You can optionally add database.backup_path to your behat.yml . If its value is a file path, WordHat will use it as the back up to restore the database from. You could use this to create a \u201cseed\u201d database, ensuring an identical environment each time, and facilitating convenient pre-configuration (i.e. active plugins, theme, site options, and so on). If set with a directory path, when WordHat creates its back up of the database when first invoked, the back up will be stored in this location. If the path is invalid or the option has not been explictly set, WordHat will choose its own temporary directory (e.g. /tmp/ on a Linux or MacOS).","title":"Database Content"},{"location":"recipes/content.html#database-content","text":"Your tests will probably create WordPress content during their execution, and you need to remove that content from the database after each test. It is important to distinguish between persistent and non-persistent database content: When Behat starts, that initial state of the database is persisted through all tests. Database modifications made during a test, on the other hand, are not persistent. This means that database operations performed from within a test, such as the creation of posts or users, should be discarded after each test. When you write tests that create, update, or delete content in the database, mark the scenario or feature with the @db tag .","title":"Database content"},{"location":"recipes/content.html#non-persistent-content","text":"You can either take care of removing non-persistent content yourself, perhaps by using a Behat hook in a custom context class, or by scripting it into a CI process, or by letting WordHat do this for you. Setting database.restore_after_test in your behat.yml to true will have WordHat back up the database when first invoked, and then restore the database from that back up after each scenario. We strongly recommend using the WP-CLI driver when this is enabled.","title":"Non-persistent content"},{"location":"recipes/content.html#persistent-content","text":"You can optionally add database.backup_path to your behat.yml . If its value is a file path, WordHat will use it as the back up to restore the database from. You could use this to create a \u201cseed\u201d database, ensuring an identical environment each time, and facilitating convenient pre-configuration (i.e. active plugins, theme, site options, and so on). If set with a directory path, when WordHat creates its back up of the database when first invoked, the back up will be stored in this location. If the path is invalid or the option has not been explictly set, WordHat will choose its own temporary directory (e.g. /tmp/ on a Linux or MacOS).","title":"Persistent content"},{"location":"recipes/faq.html","text":"FAQs \u00b6 If you are new to the project or Behat, we recommend that you first read through our documentation . For any questions, feedback, or to contribute, you can get in contact with us via Github or our Slack . Browsers \u00b6 If you are using Selenium to run Javascript tests, and you access your WordPress site over HTTPS, and it has a self-signed certificate, you will need to manually configure the web browser to accept that certificate. Drivers \u00b6 If you are using the WP-CLI driver to connect to a remote WordPress site over SSH , WordHat assumes the remote server is Linux-like, with a shell that provides GNU Coreutils . To configure WordHat to use a specific driver, set default_driver in your behat.yml . As of v1.1.0, it is possible to use multiple drivers at the same time. This should be considered an experimental feature for advanced users only. To enable it, tag a scenario with the name of the driver to use (e.g. @wpcli or @wpphp ). Selenium \u00b6 On a Mac, Selenium is incompatible with the default Apple Java; error messages look like \u201cUnsupported major.minor version 52.0\u201d. To fix, install Oracle Java Platform JDK . With Selenium, some environments may require a \u201cwebdriver\u201d; error messages may refer to \u201cGeckoWebDriver\u201d or \u201cChromeWebDriver\u201d, etc. Good solutions include vvo/selenium-standalone or joomla-projects/selenium-server-standalone . Supported platforms \u00b6 WordHat supports MacOS, most flavours of Linux, and Windows. We use Travis-CI and Appveyor to test on Ubuntu and Windows, respectively, and require modern versions of PHP. Virtual machines (Vagrant) \u00b6 If you are using a Vagrant-powered virtual machine to run Behat via the WP-CLI driver , you will need to vagrant ssh into the box once. This will set up password-less authentication; otherwise, WordHat will prompt you for the SSH password frequently. WordPress \u00b6 If your WordPress is installed in a subdirectory, you need to set the site_url option to the value of the \u201cWordPress address (URL)\u201d option (found in WordPress > Settings > General). For more information, consult the WordHat documentation .","title":"FAQ"},{"location":"recipes/faq.html#faqs","text":"If you are new to the project or Behat, we recommend that you first read through our documentation . For any questions, feedback, or to contribute, you can get in contact with us via Github or our Slack .","title":"FAQs"},{"location":"recipes/faq.html#browsers","text":"If you are using Selenium to run Javascript tests, and you access your WordPress site over HTTPS, and it has a self-signed certificate, you will need to manually configure the web browser to accept that certificate.","title":"Browsers"},{"location":"recipes/faq.html#drivers","text":"If you are using the WP-CLI driver to connect to a remote WordPress site over SSH , WordHat assumes the remote server is Linux-like, with a shell that provides GNU Coreutils . To configure WordHat to use a specific driver, set default_driver in your behat.yml . As of v1.1.0, it is possible to use multiple drivers at the same time. This should be considered an experimental feature for advanced users only. To enable it, tag a scenario with the name of the driver to use (e.g. @wpcli or @wpphp ).","title":"Drivers"},{"location":"recipes/faq.html#selenium","text":"On a Mac, Selenium is incompatible with the default Apple Java; error messages look like \u201cUnsupported major.minor version 52.0\u201d. To fix, install Oracle Java Platform JDK . With Selenium, some environments may require a \u201cwebdriver\u201d; error messages may refer to \u201cGeckoWebDriver\u201d or \u201cChromeWebDriver\u201d, etc. Good solutions include vvo/selenium-standalone or joomla-projects/selenium-server-standalone .","title":"Selenium"},{"location":"recipes/faq.html#supported-platforms","text":"WordHat supports MacOS, most flavours of Linux, and Windows. We use Travis-CI and Appveyor to test on Ubuntu and Windows, respectively, and require modern versions of PHP.","title":"Supported platforms"},{"location":"recipes/faq.html#virtual-machines-vagrant","text":"If you are using a Vagrant-powered virtual machine to run Behat via the WP-CLI driver , you will need to vagrant ssh into the box once. This will set up password-less authentication; otherwise, WordHat will prompt you for the SSH password frequently.","title":"Virtual machines (Vagrant)"},{"location":"recipes/faq.html#wordpress","text":"If your WordPress is installed in a subdirectory, you need to set the site_url option to the value of the \u201cWordPress address (URL)\u201d option (found in WordPress > Settings > General). For more information, consult the WordHat documentation .","title":"WordPress"},{"location":"recipes/errors/overview.html","text":"Exception error codes \u00b6 When WordHat is forced to throw a user-facing PHP exception, an error code beginning with \u201cW\u201d will be included at the start of the message. This documentation is provided to help you better understand the error, and in some cases, provide extra information to help you resolve the problem. The range of valid error codes is W000 to W999 : W000-099 represent miscellanous internal errors. W100-199 represent internal errors related to the WP-CLI driver. W200-299 represent internal errors related to the WP-PHP driver. W300-399 are reserved for future use. W400-499 represent errors related to PageObjects used by the drivers. W500-599 represent errors from the WP-CLI driver. W600-699 represent errors from the WP-PHP driver. W700-799 are reserved for future use. W800-899 represent errors from Behat contexts (and associated plumbing). W900-999 are reserved for future use.","title":"Overview"},{"location":"recipes/errors/overview.html#exception-error-codes","text":"When WordHat is forced to throw a user-facing PHP exception, an error code beginning with \u201cW\u201d will be included at the start of the message. This documentation is provided to help you better understand the error, and in some cases, provide extra information to help you resolve the problem. The range of valid error codes is W000 to W999 : W000-099 represent miscellanous internal errors. W100-199 represent internal errors related to the WP-CLI driver. W200-299 represent internal errors related to the WP-PHP driver. W300-399 are reserved for future use. W400-499 represent errors related to PageObjects used by the drivers. W500-599 represent errors from the WP-CLI driver. W600-699 represent errors from the WP-PHP driver. W700-799 are reserved for future use. W800-899 represent errors from Behat contexts (and associated plumbing). W900-999 are reserved for future use.","title":"Exception error codes"},{"location":"recipes/errors/w000-099.html","text":"Error codes W000-099 \u00b6 These errors should only appear if you have added a custom driver to WordHat, somehow adjusted the bundled drivers\u2019 initialisation or bootstrapping processes, or asked a driver to do something it does not support. W001 \u00b6 No ability to (\u2026). Maybe use another driver? The current driver does not support the requested action. A fix is to use another driver. W002 \u00b6 [W002] Driver \u2018(\u2026)\u2019 is not registered. WordHat could not find the requested driver. Check your behat.yml for typos.","title":"Errors W000-099"},{"location":"recipes/errors/w000-099.html#error-codes-w000-099","text":"These errors should only appear if you have added a custom driver to WordHat, somehow adjusted the bundled drivers\u2019 initialisation or bootstrapping processes, or asked a driver to do something it does not support.","title":"Error codes W000-099"},{"location":"recipes/errors/w000-099.html#w001","text":"No ability to (\u2026). Maybe use another driver? The current driver does not support the requested action. A fix is to use another driver.","title":"W001"},{"location":"recipes/errors/w000-099.html#w002","text":"[W002] Driver \u2018(\u2026)\u2019 is not registered. WordHat could not find the requested driver. Check your behat.yml for typos.","title":"W002"},{"location":"recipes/errors/w100-199.html","text":"Error codes W100-199 \u00b6 These errors should only appear if something internal to the WP-CLI driver has gone wrong. W100 \u00b6 Your WP-CLI is too old; version 1.5.0 or newer is required. Check WordHat\u2019s system requirements . W101 \u00b6 WordPress does not seem to be installed. Check \u201cpath\u201d and/or \u201calias\u201d settings in behat.yml WP-CLI cannot find WordPress. Check WordHat\u2019s configuration settings . W102 \u00b6 WP-CLI driver failure in method (\u2026): Tried to run: (\u2026) WP-CLI could not execute the requested command. Read the output for further information, and check WordHat\u2019s configuration settings .","title":"Errors W100-199"},{"location":"recipes/errors/w100-199.html#error-codes-w100-199","text":"These errors should only appear if something internal to the WP-CLI driver has gone wrong.","title":"Error codes W100-199"},{"location":"recipes/errors/w100-199.html#w100","text":"Your WP-CLI is too old; version 1.5.0 or newer is required. Check WordHat\u2019s system requirements .","title":"W100"},{"location":"recipes/errors/w100-199.html#w101","text":"WordPress does not seem to be installed. Check \u201cpath\u201d and/or \u201calias\u201d settings in behat.yml WP-CLI cannot find WordPress. Check WordHat\u2019s configuration settings .","title":"W101"},{"location":"recipes/errors/w100-199.html#w102","text":"WP-CLI driver failure in method (\u2026): Tried to run: (\u2026) WP-CLI could not execute the requested command. Read the output for further information, and check WordHat\u2019s configuration settings .","title":"W102"},{"location":"recipes/errors/w200-299.html","text":"Error codes W200-299 \u00b6 These errors should only appear if something internal to the WP-PHP driver has gone wrong. W200 \u00b6 WordPress PHP driver cannot find WordPress at (\u2026). WordHat cannot find WordPress. Check WordHat\u2019s $path configuration setting .","title":"Errors W200-299"},{"location":"recipes/errors/w200-299.html#error-codes-w200-299","text":"These errors should only appear if something internal to the WP-PHP driver has gone wrong.","title":"Error codes W200-299"},{"location":"recipes/errors/w200-299.html#w200","text":"WordPress PHP driver cannot find WordPress at (\u2026). WordHat cannot find WordPress. Check WordHat\u2019s $path configuration setting .","title":"W200"},{"location":"recipes/errors/w400-499.html","text":"Error codes W400-499 \u00b6 These errors originate from PageObjects , which are used by the drivers to interact with WordPress in a way that prevents code duplication and promotes re-use. W400 \u00b6 Metabox \u201c(\u2026)\u201d not found on the screen. The browser cannot find the specified metabox on a content\u2019s new/edit screens. Does the user\u2019s role give visibility of the metabox? Is the metabox registered for the content type? W401 \u00b6 Expected screen is the wp-admin dashboard, instead on \u201c(\u2026)\u201d. The browser is on an unexpected screen. Did something cause a redirect to another screen? Has the user authenticated? W402 \u00b6 Expected screen header \u201c(\u2026)\u201d, found \u201c(\u2026)\u201d. Header could not be found The browser is on an unexpected screen, or the screen has unexpectedly changed. Did something cause a redirect to another screen? Has the user authenticated? W403 \u00b6 Toolbar link \u201c(\u2026)\u201d could not be found The specified item could not be found in the WordPress Toolbar. Has the user authenticated? Does the user\u2019s role give visibility of the toolbar item? W404 \u00b6 Search field in the toolbar could not be found The search field in the WordPress Toolbar could not be found. Has the user authenticated? W405 \u00b6 Menu item could not be found The specified item could not be found in the WordPress Admin Menu. Has the user authenticated? Does the user\u2019s role give visibility of the toolbar item? W406 \u00b6 To create pages you need to pass a factory with setPageObjectFactory() To create elements you need to pass a factory with setPageObjectFactory() To access the page factory you need to pass it first with setPageObjectFactory() The most likely reason for these message is that you have used the bundled sensiolabs/behat-page-object-extension package in a custom Behat context, but have not set up setPageObjectFactory() before you\u2019ve tried to use it. Refer to WordHat\u2019s own codebase, or the sensiolabs/behat-page-object-extension package\u2019s documentation.","title":"Errors W400-499"},{"location":"recipes/errors/w400-499.html#error-codes-w400-499","text":"These errors originate from PageObjects , which are used by the drivers to interact with WordPress in a way that prevents code duplication and promotes re-use.","title":"Error codes W400-499"},{"location":"recipes/errors/w400-499.html#w400","text":"Metabox \u201c(\u2026)\u201d not found on the screen. The browser cannot find the specified metabox on a content\u2019s new/edit screens. Does the user\u2019s role give visibility of the metabox? Is the metabox registered for the content type?","title":"W400"},{"location":"recipes/errors/w400-499.html#w401","text":"Expected screen is the wp-admin dashboard, instead on \u201c(\u2026)\u201d. The browser is on an unexpected screen. Did something cause a redirect to another screen? Has the user authenticated?","title":"W401"},{"location":"recipes/errors/w400-499.html#w402","text":"Expected screen header \u201c(\u2026)\u201d, found \u201c(\u2026)\u201d. Header could not be found The browser is on an unexpected screen, or the screen has unexpectedly changed. Did something cause a redirect to another screen? Has the user authenticated?","title":"W402"},{"location":"recipes/errors/w400-499.html#w403","text":"Toolbar link \u201c(\u2026)\u201d could not be found The specified item could not be found in the WordPress Toolbar. Has the user authenticated? Does the user\u2019s role give visibility of the toolbar item?","title":"W403"},{"location":"recipes/errors/w400-499.html#w404","text":"Search field in the toolbar could not be found The search field in the WordPress Toolbar could not be found. Has the user authenticated?","title":"W404"},{"location":"recipes/errors/w400-499.html#w405","text":"Menu item could not be found The specified item could not be found in the WordPress Admin Menu. Has the user authenticated? Does the user\u2019s role give visibility of the toolbar item?","title":"W405"},{"location":"recipes/errors/w400-499.html#w406","text":"To create pages you need to pass a factory with setPageObjectFactory() To create elements you need to pass a factory with setPageObjectFactory() To access the page factory you need to pass it first with setPageObjectFactory() The most likely reason for these message is that you have used the bundled sensiolabs/behat-page-object-extension package in a custom Behat context, but have not set up setPageObjectFactory() before you\u2019ve tried to use it. Refer to WordHat\u2019s own codebase, or the sensiolabs/behat-page-object-extension package\u2019s documentation.","title":"W406"},{"location":"recipes/errors/w500-599.html","text":"Error codes W500-599 \u00b6 These errors should only appear if you are using the WP-CLI driver, and something unexpected happens. W500 \u00b6 Could not find comment with ID (\u2026) WP-CLI could not find the specified comment. Check your *.feature files for typos. W501 \u00b6 Could not find post with ID (\u2026) WP-CLI could not find the specified content. Check your *.feature files for typos. W502 \u00b6 Could not export database WP-CLI could not export the database. Read the output for further information. W503 \u00b6 Could not find term with ID (\u2026) WP-CLI could not find the specified taxonomy term. Check your *.feature files for typos. W504 \u00b6 Could not find user with ID (\u2026) WP-CLI could not find the specified user account. Check your *.feature files for typos. W505 \u00b6 No known way to check (\u2026) has password (\u2026) The WP-CLI driver does not support Driver\\Element\\Wpcli\\validateCredentials() by design. Use another driver if this is required. W506 \u00b6 Sidebar \u201c(\u2026)\u201d does not exist WP-CLI could not find a sidebar registered with this name. Check your *.feature files for typos.","title":"Errors W500-599"},{"location":"recipes/errors/w500-599.html#error-codes-w500-599","text":"These errors should only appear if you are using the WP-CLI driver, and something unexpected happens.","title":"Error codes W500-599"},{"location":"recipes/errors/w500-599.html#w500","text":"Could not find comment with ID (\u2026) WP-CLI could not find the specified comment. Check your *.feature files for typos.","title":"W500"},{"location":"recipes/errors/w500-599.html#w501","text":"Could not find post with ID (\u2026) WP-CLI could not find the specified content. Check your *.feature files for typos.","title":"W501"},{"location":"recipes/errors/w500-599.html#w502","text":"Could not export database WP-CLI could not export the database. Read the output for further information.","title":"W502"},{"location":"recipes/errors/w500-599.html#w503","text":"Could not find term with ID (\u2026) WP-CLI could not find the specified taxonomy term. Check your *.feature files for typos.","title":"W503"},{"location":"recipes/errors/w500-599.html#w504","text":"Could not find user with ID (\u2026) WP-CLI could not find the specified user account. Check your *.feature files for typos.","title":"W504"},{"location":"recipes/errors/w500-599.html#w505","text":"No known way to check (\u2026) has password (\u2026) The WP-CLI driver does not support Driver\\Element\\Wpcli\\validateCredentials() by design. Use another driver if this is required.","title":"W505"},{"location":"recipes/errors/w500-599.html#w506","text":"Sidebar \u201c(\u2026)\u201d does not exist WP-CLI could not find a sidebar registered with this name. Check your *.feature files for typos.","title":"W506"},{"location":"recipes/errors/w600-699.html","text":"Error codes W600-699 \u00b6 These errors should only appear if you are using the WP-PHP driver, and something unexpected happens. W600 \u00b6 Failed creating a new comment: (\u2026) WordPress could not add the comment. Read the output for futher information. W601 \u00b6 Could not find comment with ID (\u2026) WordPress could not find the specified comment. Check your *.feature files for typos. W602 \u00b6 Failed deleting a comment WordPress could not delete the specified comment. Does it exist? W603 \u00b6 Failed creating new content: (\u2026) WordPress could not create the new content. Read the output for futher information. W604 \u00b6 Could not find content with ID (\u2026) WordPress could not find the specific content. Check your *.feature files for typos. W605 \u00b6 Failed deleting content WordPress could not delete the specified content. Does it exist? W606 \u00b6 Could not export database in method (\u2026): (\u2026) (\u2026) WordPress could not export the database. Read the output for further information. W607 \u00b6 Could not import database in method (\u2026): (\u2026) (\u2026) WordPress could not import a SQL file into the database. Read the output for further information. W608 \u00b6 Cannot find the plugin: (\u2026) WordPress could not find the specified plugin. Check your *.feature files for typos. W609 \u00b6 Failed creating a new term: (\u2026) WordPress could not create the specified taxonomy term. Read the output for further information. W610 \u00b6 Could not find term with ID (\u2026) Could not find term with ID (\u2026): (\u2026) WordPress could not find the specified taxonomy term by name or by ID. Check your *.feature files for typos. W611 \u00b6 Failed deleting a term: (\u2026) WordPress could not delete the specified taxonomy term. Read the output for further information. W612 \u00b6 Could not find theme (\u2026) WordPress could not find the specified theme. Check your *.feature files for typos. W613 \u00b6 Widget (\u2026) does not exist WordPress could not find the specified widget. Check your *.feature files for typos. W614 \u00b6 Sidebar \u201c(\u2026)\u201d does not exist WordPress could not find a sidebar registered with this name. Check your *.feature files for typos. W615 \u00b6 Failed creating new user: (..) WordPress could not create the specified user account. Read the output for further information. W616 \u00b6 Could not find user with ID (\u2026) WordPress could not find the specified user account. Check your *.feature files for typos. W617 \u00b6 Failed deleting user WordPress could not delete the specified user account. Does it exist?","title":"Errors W600-699"},{"location":"recipes/errors/w600-699.html#error-codes-w600-699","text":"These errors should only appear if you are using the WP-PHP driver, and something unexpected happens.","title":"Error codes W600-699"},{"location":"recipes/errors/w600-699.html#w600","text":"Failed creating a new comment: (\u2026) WordPress could not add the comment. Read the output for futher information.","title":"W600"},{"location":"recipes/errors/w600-699.html#w601","text":"Could not find comment with ID (\u2026) WordPress could not find the specified comment. Check your *.feature files for typos.","title":"W601"},{"location":"recipes/errors/w600-699.html#w602","text":"Failed deleting a comment WordPress could not delete the specified comment. Does it exist?","title":"W602"},{"location":"recipes/errors/w600-699.html#w603","text":"Failed creating new content: (\u2026) WordPress could not create the new content. Read the output for futher information.","title":"W603"},{"location":"recipes/errors/w600-699.html#w604","text":"Could not find content with ID (\u2026) WordPress could not find the specific content. Check your *.feature files for typos.","title":"W604"},{"location":"recipes/errors/w600-699.html#w605","text":"Failed deleting content WordPress could not delete the specified content. Does it exist?","title":"W605"},{"location":"recipes/errors/w600-699.html#w606","text":"Could not export database in method (\u2026): (\u2026) (\u2026) WordPress could not export the database. Read the output for further information.","title":"W606"},{"location":"recipes/errors/w600-699.html#w607","text":"Could not import database in method (\u2026): (\u2026) (\u2026) WordPress could not import a SQL file into the database. Read the output for further information.","title":"W607"},{"location":"recipes/errors/w600-699.html#w608","text":"Cannot find the plugin: (\u2026) WordPress could not find the specified plugin. Check your *.feature files for typos.","title":"W608"},{"location":"recipes/errors/w600-699.html#w609","text":"Failed creating a new term: (\u2026) WordPress could not create the specified taxonomy term. Read the output for further information.","title":"W609"},{"location":"recipes/errors/w600-699.html#w610","text":"Could not find term with ID (\u2026) Could not find term with ID (\u2026): (\u2026) WordPress could not find the specified taxonomy term by name or by ID. Check your *.feature files for typos.","title":"W610"},{"location":"recipes/errors/w600-699.html#w611","text":"Failed deleting a term: (\u2026) WordPress could not delete the specified taxonomy term. Read the output for further information.","title":"W611"},{"location":"recipes/errors/w600-699.html#w612","text":"Could not find theme (\u2026) WordPress could not find the specified theme. Check your *.feature files for typos.","title":"W612"},{"location":"recipes/errors/w600-699.html#w613","text":"Widget (\u2026) does not exist WordPress could not find the specified widget. Check your *.feature files for typos.","title":"W613"},{"location":"recipes/errors/w600-699.html#w614","text":"Sidebar \u201c(\u2026)\u201d does not exist WordPress could not find a sidebar registered with this name. Check your *.feature files for typos.","title":"W614"},{"location":"recipes/errors/w600-699.html#w615","text":"Failed creating new user: (..) WordPress could not create the specified user account. Read the output for further information.","title":"W615"},{"location":"recipes/errors/w600-699.html#w616","text":"Could not find user with ID (\u2026) WordPress could not find the specified user account. Check your *.feature files for typos.","title":"W616"},{"location":"recipes/errors/w600-699.html#w617","text":"Failed deleting user WordPress could not delete the specified user account. Does it exist?","title":"W617"},{"location":"recipes/errors/w800-899.html","text":"Error codes W800-899 \u00b6 These errors originate from WordHat\u2019s Behat contexts (and associated plumbing). W801 \u00b6 User not found for role \u201c(name)\u201d. User not found for name \u201c(name)\u201d. WordHat cannot find the specified user account. Does it exist? Check your behat.yml for typos. W802 \u00b6 The user \u201c(name)\u201d was logged-in succesfully. This should not have happened. A user with role \u201c(name)\u201d was logged-in succesfully. This should not have happened. This exception asserts that the user could not logged in; but, they were able to. Have you used the correct step definition? W803 \u00b6 The user could not be logged-in. WordHat could not authenticate with WordPress as the specified user. Assuming the user account exists, this is typically very hard to debug. Check your behat.yml for typos. Consider running the scenario in a browser so you can see where the problem occurs. W804 \u00b6 User with login: (name) exists but password is incorrect. User with login: (name) exists, but (parameter) is not (expected value) which was specified. User with login: (name) exists, but role (name) is not in the list of applied roles: (value). Check your behat.yml for typos. W806 \u00b6 The text \u201c(value)\u201d was not found in the toolbar. Has the user authenticated? Can the user see the WordPress Toolbar? W807 \u00b6 Toolbar shows authenticated user is \u201c(value)\u201d, not \u201c(expected value)\u201d. Has the user authenticated? Can the user see the WordPress Toolbar? Check your behat.yml for typos. W808 \u00b6 Content editor is in \u201c(value)\u201d mode. Expected \u201c(another mode)\u201d. In WordPress\u2019 Post Editor, are both TinyMCE and Rich Text views available for the post_content field? W809 \u00b6 Metabox \u201c(name)\u201d was found on the page, but it should not be there. Have you used the correct step definition? W810 \u00b6 \u201cGiven I am viewing a post:\u201d step must only contain one post. This step definition \u2013 currently \u2013 only accepts one post. W811 \u00b6 Content \u201c(name)\u201d exists, but it should not. Have you used the correct step definition?","title":"Errors W800-899"},{"location":"recipes/errors/w800-899.html#error-codes-w800-899","text":"These errors originate from WordHat\u2019s Behat contexts (and associated plumbing).","title":"Error codes W800-899"},{"location":"recipes/errors/w800-899.html#w801","text":"User not found for role \u201c(name)\u201d. User not found for name \u201c(name)\u201d. WordHat cannot find the specified user account. Does it exist? Check your behat.yml for typos.","title":"W801"},{"location":"recipes/errors/w800-899.html#w802","text":"The user \u201c(name)\u201d was logged-in succesfully. This should not have happened. A user with role \u201c(name)\u201d was logged-in succesfully. This should not have happened. This exception asserts that the user could not logged in; but, they were able to. Have you used the correct step definition?","title":"W802"},{"location":"recipes/errors/w800-899.html#w803","text":"The user could not be logged-in. WordHat could not authenticate with WordPress as the specified user. Assuming the user account exists, this is typically very hard to debug. Check your behat.yml for typos. Consider running the scenario in a browser so you can see where the problem occurs.","title":"W803"},{"location":"recipes/errors/w800-899.html#w804","text":"User with login: (name) exists but password is incorrect. User with login: (name) exists, but (parameter) is not (expected value) which was specified. User with login: (name) exists, but role (name) is not in the list of applied roles: (value). Check your behat.yml for typos.","title":"W804"},{"location":"recipes/errors/w800-899.html#w806","text":"The text \u201c(value)\u201d was not found in the toolbar. Has the user authenticated? Can the user see the WordPress Toolbar?","title":"W806"},{"location":"recipes/errors/w800-899.html#w807","text":"Toolbar shows authenticated user is \u201c(value)\u201d, not \u201c(expected value)\u201d. Has the user authenticated? Can the user see the WordPress Toolbar? Check your behat.yml for typos.","title":"W807"},{"location":"recipes/errors/w800-899.html#w808","text":"Content editor is in \u201c(value)\u201d mode. Expected \u201c(another mode)\u201d. In WordPress\u2019 Post Editor, are both TinyMCE and Rich Text views available for the post_content field?","title":"W808"},{"location":"recipes/errors/w800-899.html#w809","text":"Metabox \u201c(name)\u201d was found on the page, but it should not be there. Have you used the correct step definition?","title":"W809"},{"location":"recipes/errors/w800-899.html#w810","text":"\u201cGiven I am viewing a post:\u201d step must only contain one post. This step definition \u2013 currently \u2013 only accepts one post.","title":"W810"},{"location":"recipes/errors/w800-899.html#w811","text":"Content \u201c(name)\u201d exists, but it should not. Have you used the correct step definition?","title":"W811"}]}